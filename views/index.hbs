<h1>{{title}}</h1>
<p>Welcome to {{title}}</p>
<div id="react-app"></div>
<script>
var dbg = (x => {console.log(x); return x})

var contacts = [
  { key: 1, name: 'Alan Abbotson', email: 'a@a.a', description: 'Front-end Unicorn' },
  { key: 2, name: 'Betsy Bobson', email: 'b@b.b' },
  { key: 3, name: 'Cara Carrotson' }
]

var ContactItem = React.createClass({
  propTypes: {
    name: React.PropTypes.string.isRequired,
    email: React.PropTypes.string.isRequired,
    description: React.PropTypes.string
  },
  render: function() {
    return React.createElement('li', {},
      React.createElement('h2', {}, this.props.name),
      React.createElement('a', { href: 'mailto:' + this.props.email }, this.props.email),
      React.createElement('div', {}, this.props.description)
    )
  }
})

var ContactList = React.createClass({
  propTypes: {
    contacts: React.PropTypes.array.isRequired
  },
  render: function() {
    return React.createElement('div', {},
      React.createElement('h1', {}, 'Contacts'),
      React.createElement('ul', {},
        _(this.props.contacts)
          .filter(c => c.email)
          .map(c => React.createElement(ContactItem, c))
          .value()
      )
    )
  }
})

var ContactForm = React.createClass({
  propTypes: {
    model: React.PropTypes.object.isRequired,
    onChange: React.PropTypes.func.isRequired
  },
  updateContact: function(field) {
    return e => {
      _.assign(this.props.model.newContact, {
        [field]: e.target.value
      })
      this.props.onChange(this.props.model)
    }
  },
  createContact: function() {
    var newContact = this.props.model.newContact
    newContact.key = this.props.model.contacts.length
    this.props.model.contacts.push(newContact)
    this.resetContact()
    this.props.onChange(this.props.model)
  },
  resetContact: function() {
    this.props.model.newContact = { name: '', email: '', description: '' }
  },
  render: function() {
    if (!this.props.model.newContact) { this.resetContact() }
    return React.createElement('form', {},
      React.createElement('div', { className: 'row' },
        React.createElement('input', {
          className: 'six columns',
          type: 'text',
          placeholder: 'Name',
          value: this.props.model.newContact.name,
          onChange: this.updateContact('name')
        }),
        React.createElement('input', {
          className: 'six columns',
          type: 'email',
          placeholder: 'E-mail',
          value: this.props.model.newContact.email,
          onChange: this.updateContact('email')
        })
      ),
      React.createElement('textarea', {
        className: 'u-full-width',
        placeholder: 'Description',
        value: this.props.model.newContact.description,
        onChange: this.updateContact('description')
      }),
      React.createElement('button', {
        className: 'u-full-width',
        type: 'button',
        onClick: this.createContact
      }, 'Add Contact')
    )
  }
})

function fullRender(model) {
  ReactDOM.render(React.createElement('div', {},
    React.createElement(ContactList, { contacts: model.contacts }),
    React.createElement(ContactForm, { model, onChange: function(model) { fullRender(model) }})
  ), document.getElementById('react-app'))
}
fullRender({ contacts })
</script>
